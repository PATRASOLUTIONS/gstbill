import { connectToDatabase } from "@/lib/mongodb"
import { ObjectId } from "mongodb"
import { generateInvoicePDF } from "@/lib/invoice-generator"

export async function GET(request: Request, { params }: { params: { id: string } }) {
  try {
    console.log(`Attempting to download invoice with ID: ${params.id}`)

    // Connect to the database
    const { db } = await connectToDatabase()

    // Try to fetch the invoice
    let invoice = null
    try {
      if (ObjectId.isValid(params.id)) {
        invoice = await db.collection("invoices").findOne({ _id: new ObjectId(params.id) })
      }

      if (!invoice) {
        console.log(`Invoice not found, trying to find by invoiceNumber: ${params.id}`)
        invoice = await db.collection("invoices").findOne({ invoiceNumber: params.id })
      }
    } catch (error) {
      console.error("Error fetching invoice:", error)
    }

    // If invoice is still null, create a fallback template
    if (!invoice) {
      console.log("Invoice not found, using fallback template")
      invoice = createFallbackInvoice(params.id)
    }

    // Generate PDF
    const pdfBuffer = await generateInvoicePDF(invoice)

    // Return the PDF
    return new Response(pdfBuffer, {
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": `attachment; filename="invoice-${params.id}.pdf"`,
      },
    })
  } catch (error) {
    console.error("Error generating invoice PDF:", error)

    // Create a simple error PDF
    const errorPdfBuffer = await generateErrorPDF()

    return new Response(errorPdfBuffer, {
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": `attachment; filename="invoice-error.pdf"`,
      },
    })
  }
}

// Function to create a fallback invoice template
function createFallbackInvoice(id: string) {
  return {
    _id: id,
    invoiceNumber: id,
    date: new Date().toISOString(),
    dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
    customer: {
      name: "Sample Customer",
      email: "customer@example.com",
      phone: "123-456-7890",
      address: "123 Sample St\nSample City\nSample State - 560001",
      gstin: "29ABCDE1234F1Z5",
      state: "Karnataka",
      stateCode: "29",
    },
    items: [
      {
        product: {
          name: "Sample Product",
          description: "This is a sample product",
        },
        quantity: 1,
        price: 1000,
        discount: 0,
        taxRate: 18,
        hsn: "8471",
      },
    ],
    subtotal: 1000,
    discount: 0,
    tax: 18,
    taxAmount: 180,
    total: 1180,
    notes: "This is a sample invoice template.",
    paymentStatus: "pending",
    paymentMethod: "Not specified",
    bankDetails: {
      accountName: "Your Company Name",
      accountNumber: "1234567890",
      bankName: "Sample Bank",
      ifscCode: "SBIN0001234",
      branchName: "Sample Branch",
    },
    termsAndConditions:
      "1. Payment due within 30 days. 2. Goods once sold will not be taken back. 3. Interest @18% p.a. will be charged on delayed payments.",
  }
}

// Function to generate a simple error PDF
async function generateErrorPDF() {
  const { jsPDF } = await import("jspdf")
  const doc = new jsPDF()

  // Add header
  doc.setFontSize(20)
  doc.setTextColor(0, 0, 0)
  doc.text("INVOICE", 105, 20, { align: "center" })

  // Add company name
  doc.setFontSize(24)
  doc.setTextColor(40, 40, 40)
  doc.text("YOUR COMPANY", 20, 20)

  // Add error message
  doc.setFontSize(12)
  doc.setTextColor(255, 0, 0)
  doc.text("We couldn't generate the complete invoice at this time.", 105, 50, { align: "center" })
  doc.text("Please try again later or contact support.", 105, 60, { align: "center" })

  // Add invoice schema
  doc.setFontSize(10)
  doc.setTextColor(100, 100, 100)
  doc.text("Invoice would typically include:", 20, 80)
  doc.text("- Invoice Number and Date", 30, 90)
  doc.text("- Customer Information", 30, 100)
  doc.text("- Item Details (Products/Services)", 30, 110)
  doc.text("- Pricing and Quantity", 30, 120)
  doc.text("- Subtotal, Tax, and Total", 30, 130)
  doc.text("- Payment Terms and Methods", 30, 140)

  // Add footer
  doc.setFontSize(8)
  doc.setTextColor(150, 150, 150)
  doc.text("Generated by Inventory Management System", 105, 285, { align: "center" })

  return Buffer.from(doc.output("arraybuffer"))
}

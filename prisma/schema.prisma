// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  products      Product[]
  customers     Customer[]
  orders        Order[]
  invoices      Invoice[]
  refunds       Refund[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  cost        Float?
  sku         String   @unique
  barcode     String?
  quantity    Int      @default(0)
  category    String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
  invoiceItems InvoiceItem[]
  refundItems RefundItem[]
}

model Customer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String?
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]
  invoices    Invoice[]
  refunds     Refund[]
}

model Order {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber String   @unique
  customerId  String?  @db.ObjectId
  status      String   @default("pending") // pending, processing, completed, cancelled
  subtotal    Float
  tax         Float
  total       Float
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  customer    Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  items       OrderItem[]
  invoices    Invoice[]
  refunds     Refund[]
}

model OrderItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String   @db.ObjectId
  productId   String   @db.ObjectId
  quantity    Int
  price       Float
  total       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Invoice {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  invoiceNumber String   @unique
  customerId    String?  @db.ObjectId
  orderId       String?  @db.ObjectId
  status        String   @default("draft") // draft, sent, paid, overdue, cancelled
  subtotal      Float
  tax           Float
  total         Float
  dueDate       DateTime?
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String   @db.ObjectId

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  customer      Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  order         Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  items         InvoiceItem[]
  refunds       Refund[]
}

model InvoiceItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  invoiceId   String   @db.ObjectId
  productId   String   @db.ObjectId
  description String?
  quantity    Int
  price       Float
  total       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Refund {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  refundNumber  String   @unique
  customerId    String?  @db.ObjectId
  orderId       String?  @db.ObjectId
  invoiceId     String?  @db.ObjectId
  status        String   @default("pending") // pending, approved, rejected, completed
  reason        String
  subtotal      Float
  tax           Float
  total         Float
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String   @db.ObjectId

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  customer      Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  order         Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  invoice       Invoice? @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  items         RefundItem[]
}

model RefundItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  refundId    String   @db.ObjectId
  productId   String   @db.ObjectId
  quantity    Int
  price       Float
  total       Float
  reason      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  refund      Refund   @relation(fields: [refundId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}
